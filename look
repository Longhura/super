--[[
    Script: LookAtGUI Hoàn Chỉnh
    Mô tả: Hiển thị GUI cho phép nhìn vào người chơi khác,
           tự động xử lý khi bản thân hoặc mục tiêu chết,
           và có chức năng dịch chuyển ra sau lưng mục tiêu.
]]

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService") -- Thêm cho kiểm tra thiết bị

-- Local Player Variables
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Character = Player.Character or Player.CharacterAdded:Wait() -- Lấy nhân vật hiện tại hoặc chờ nhân vật mới
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- GUI setup
local ScreenGui = Instance.new("ScreenGui", Player:WaitForChild("PlayerGui"))
ScreenGui.Name = "LookAtGUI"
ScreenGui.ResetOnSpawn = false -- Giữ GUI khi chết
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Đảm bảo GUI không bị che bởi UI khác

-- === Vị trí và Kích thước Frame ===
local frameWidth = 260
local frameHeight = 300
local framePosX = 0.02
local framePosY = 0.2

local Frame = Instance.new("Frame", ScreenGui)
Frame.Size = UDim2.new(0, frameWidth, 0, frameHeight)
Frame.Position = UDim2.new(framePosX, 0, framePosY, 0)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Active = true
Frame.Draggable = true
Frame.BorderSizePixel = 0
Frame.ClipsDescendants = true -- Đảm bảo nội dung không tràn viền

Instance.new("UICorner", Frame).CornerRadius = UDim.new(0, 8)

local UIStroke = Instance.new("UIStroke", Frame)
UIStroke.Thickness = 2
UIStroke.Color = Color3.fromRGB(255, 0, 0) -- Màu viền ban đầu

-- === Hàng Tiêu đề và Nút Điều khiển ===
local titleBarHeight = 30
local buttonSize = 24
local buttonPadding = 5

local Title = Instance.new("TextLabel", Frame)
Title.Size = UDim2.new(1, -(buttonSize * 2 + buttonPadding * 3), 0, titleBarHeight)
Title.Position = UDim2.new(0, buttonPadding, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Nhìn Người Chơi"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 15
Title.TextColor3 = Color3.new(1,1,1)
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.TextYAlignment = Enum.TextYAlignment.Center

local CloseButton = Instance.new("TextButton", Frame)
CloseButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
CloseButton.Position = UDim2.new(1, -(buttonSize + buttonPadding), 0, (titleBarHeight - buttonSize) / 2)
CloseButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
CloseButton.Text = "✕"
CloseButton.TextColor3 = Color3.new(1,1,1)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 14
Instance.new("UICorner", CloseButton).CornerRadius = UDim.new(0, 4)

local MinimizeButton = Instance.new("TextButton", Frame)
MinimizeButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
MinimizeButton.Position = UDim2.new(1, -(buttonSize * 2 + buttonPadding * 2), 0, (titleBarHeight - buttonSize) / 2)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = Color3.new(1,1,1)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextSize = 18
Instance.new("UICorner", MinimizeButton).CornerRadius = UDim.new(0, 4)

-- === Các nút chức năng ===
local buttonHeight = 28
local buttonSpacing = 5
local currentY = titleBarHeight + buttonSpacing * 2 -- Bắt đầu dưới thanh tiêu đề

local function CreateFunctionButton(text, color, yPos)
	local btn = Instance.new("TextButton", Frame)
	btn.Size = UDim2.new(1, -buttonPadding * 2, 0, buttonHeight)
	btn.Position = UDim2.new(0, buttonPadding, 0, yPos)
	btn.BackgroundColor3 = color
	btn.Text = text
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.Gotham
	btn.TextSize = 14
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 5)
	return btn
end

local toggleButton = CreateFunctionButton("✅ Bật Nhìn", Color3.fromRGB(0, 170, 0), currentY)
currentY += buttonHeight + buttonSpacing

local partButton = CreateFunctionButton("Nhìn: Head", Color3.fromRGB(80, 80, 80), currentY)
currentY += buttonHeight + buttonSpacing

local reloadButton = CreateFunctionButton("Tải lại danh sách", Color3.fromRGB(80, 80, 80), currentY)
currentY += buttonHeight + buttonSpacing

local nearestButton = CreateFunctionButton("📍 Chọn Gần Nhất", Color3.fromRGB(255, 165, 0), currentY)
currentY += buttonHeight + buttonSpacing

local teleportButton = CreateFunctionButton("🚶 Dịch Chuyển Sau Lưng", Color3.fromRGB(60, 60, 200), currentY)
currentY += buttonHeight + buttonSpacing * 2

-- === Danh sách người chơi ===
local listHeight = frameHeight - currentY - buttonPadding -- Tính toán chiều cao còn lại cho danh sách
local playerList = Instance.new("ScrollingFrame", Frame)
playerList.Position = UDim2.new(0, buttonPadding, 0, currentY)
playerList.Size = UDim2.new(1, -buttonPadding * 2, 0, listHeight)
playerList.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
playerList.ScrollBarThickness = 6
playerList.CanvasSize = UDim2.new(0, 0, 0, 0)
playerList.BorderSizePixel = 0
Instance.new("UICorner", playerList).CornerRadius = UDim.new(0, 5)

-- === Icon Thu nhỏ ===
local MinimizedIcon = Instance.new("TextButton", ScreenGui)
MinimizedIcon.Size = UDim2.new(0, 80, 0, 25) -- Kích thước nhỏ hơn
MinimizedIcon.Position = UDim2.new(0, 5, 1, -30) -- Góc dưới cùng bên trái
MinimizedIcon.Text = "Mở Nhìn"
MinimizedIcon.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
MinimizedIcon.TextColor3 = Color3.new(1,1,1)
MinimizedIcon.Font = Enum.Font.Gotham
MinimizedIcon.TextSize = 12
MinimizedIcon.Visible = false
MinimizedIcon.Active = true
MinimizedIcon.Draggable = true
Instance.new("UICorner", MinimizedIcon).CornerRadius = UDim.new(0, 4)

-- Variables
local looking = true -- Trạng thái nhìn (bật/tắt)
local bodyParts = {"Head", "UpperTorso", "HumanoidRootPart", "LeftFoot", "RightFoot"}
local partIndex = 1 -- Index bộ phận cơ thể đang nhìn
local currentTarget = nil -- Player object đang được chọn làm mục tiêu
local buttons = {} -- Table chứa các nút người chơi trong playerList
local targetHumanoidConnection = nil -- Connection cho sự kiện Died của mục tiêu
local selfHumanoidDiedConnection = nil -- Connection cho sự kiện Died của bản thân
local lookAtRenderStepConnection = nil -- Connection cho RenderStep nhìn
local listButtonYOffset = 3 -- Khoảng cách giữa các nút trong danh sách

-- Rainbow border
local colors = {
	Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0),
	Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 255, 255), Color3.fromRGB(0, 0, 255),
	Color3.fromRGB(139, 0, 255)
}
task.spawn(function()
	local i = 1
	while ScreenGui.Parent do
		if UIStroke and UIStroke.Parent then -- Kiểm tra UIStroke còn tồn tại không
			local color = colors[i]
			local tween = TweenService:Create(UIStroke, TweenInfo.new(0.4), {Color = color})
			tween:Play()
			tween.Completed:Wait()
			i = i % #colors + 1
		else
			break -- Thoát nếu UIStroke bị hủy
		end
		task.wait(0.05) -- Thêm khoảng chờ nhỏ để tránh tốn tài nguyên
	end
end)

-- Function để kiểm tra tính hợp lệ của nhân vật bản thân
local function isSelfCharacterValid()
    return Character and Character.Parent and Humanoid and Humanoid.Health > 0 and HumanoidRootPart and HumanoidRootPart.Parent
end

-- Function để kiểm tra tính hợp lệ của nhân vật mục tiêu
local function isTargetCharacterValid(targetPlayer)
    if not targetPlayer or not targetPlayer:IsA("Player") then return false end
    local targetChar = targetPlayer.Character
    if not targetChar or not targetChar.Parent then return false end
    local targetHum = targetChar:FindFirstChildOfClass("Humanoid")
    local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
    return targetHum and targetHum.Health > 0 and targetHRP and targetHRP.Parent
end


-- Function để highlight nút người chơi được chọn
local function highlightSelectedButton(selectedPlayer)
    for player, btnInfo in pairs(buttons) do
        if btnInfo and btnInfo.button and btnInfo.button.Parent then -- Kiểm tra nút còn tồn tại không
            local btn = btnInfo.button
            local stroke = btn:FindFirstChildOfClass("UIStroke")
            if player == selectedPlayer then
                btn.BackgroundColor3 = Color3.fromRGB(120, 120, 120) -- Màu sáng hơn cho nút được chọn
                if stroke then stroke.Enabled = true end -- Bật viền
            else
                btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70) -- Màu mặc định
                 if stroke then stroke.Enabled = false end -- Tắt viền
            end
        end
    end
end

-- Function để xử lý khi mục tiêu chết
local function handleTargetDied(player)
    print(player.Name, "đã chết.") -- Debug
    -- Chỉ xử lý nếu mục tiêu bị chết *chính là* mục tiêu đang được chọn
    if currentTarget == player then
        looking = false -- TẮT NHÌN
        toggleButton.Text = "❎ Tắt Nhìn" -- Cập nhật nút nhìn
        toggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
        currentTarget = nil -- BỎ CHỌN mục tiêu
        highlightSelectedButton(nil) -- Bỏ highlight nút người chơi

        -- Ngắt kết nối Died sau khi đã xử lý
        if targetHumanoidConnection then
            targetHumanoidConnection:Disconnect()
            targetHumanoidConnection = nil
            print("Đã ngắt kết nối Died của mục tiêu.") -- Debug
        end
    end
end

-- Function để đặt mục tiêu mới
local function setTarget(player)
	if currentTarget == player then return end -- Không làm gì nếu chọn lại cùng mục tiêu

    print("Đang chọn mục tiêu:", player.Name) -- Debug

	-- Ngắt kết nối Died cũ của mục tiêu trước đó nếu có
	if targetHumanoidConnection then
		targetHumanoidConnection:Disconnect()
		targetHumanoidConnection = nil
        print("Đã ngắt kết nối Died của mục tiêu cũ.") -- Debug
	end

	currentTarget = player -- Đặt mục tiêu mới

	-- Kết nối theo dõi máu của mục tiêu mới
	local char = player.Character
	if char then
		local humanoid = char:FindFirstChildOfClass("Humanoid")
		if humanoid then
            -- Kết nối sự kiện Died
			targetHumanoidConnection = humanoid.Died:Connect(function()
                handleTargetDied(player) -- Gọi hàm xử lý riêng
            end)
            print("Đã kết nối Died cho mục tiêu:", player.Name) -- Debug
        else
            print("Không tìm thấy Humanoid cho mục tiêu:", player.Name) -- Debug
            -- Nếu không tìm thấy humanoid, coi như không thể theo dõi -> bỏ chọn
            currentTarget = nil
		end
	else
	    print("Không tìm thấy Character cho mục tiêu:", player.Name) -- Debug
        -- Nếu không tìm thấy character, coi như không thể theo dõi -> bỏ chọn
        currentTarget = nil
	end

    highlightSelectedButton(currentTarget) -- Highlight nút của người chơi mới (hoặc bỏ highlight nếu target bị nil)
    if not currentTarget then
        print("Không thể đặt mục tiêu, đã bỏ chọn.") -- Debug
    else
         print("Đã đặt mục tiêu thành công:", currentTarget.Name) -- Debug
    end
end

-- Function cập nhật danh sách người chơi
local function updateList()
    print("Đang cập nhật danh sách người chơi...") -- Debug
	-- Xóa các nút cũ và làm sạch table
    for _, btnInfo in pairs(buttons) do
        if btnInfo and btnInfo.button and btnInfo.button.Parent then btnInfo.button:Destroy() end
    end
	buttons = {} -- Reset table

	local yPos = listButtonYOffset -- Bắt đầu từ offset nhỏ
	local canvasHeight = yPos -- Chiều cao ban đầu của CanvasSize

	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= Player then -- Bỏ qua người chơi cục bộ
			local btn = Instance.new("TextButton", playerList) -- Parent là playerList
			btn.Name = p.Name -- Đặt tên nút để dễ debug
			btn.Size = UDim2.new(1, -10, 0, 25) -- Nút nhỏ hơn một chút
			btn.Position = UDim2.new(0, 5, 0, yPos)
			btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
			btn.Text = p.Name
			btn.TextColor3 = Color3.new(1,1,1)
			btn.Font = Enum.Font.Gotham
			btn.TextSize = 13
			Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 4)

            -- Thêm UIStroke để làm viền khi chọn (mặc định tắt)
            local stroke = Instance.new("UIStroke", btn)
            stroke.Color = Color3.fromRGB(255, 255, 0) -- Màu vàng
            stroke.Thickness = 1.5 -- Viền dày hơn chút
            stroke.Enabled = false

			buttons[p] = {button = btn} -- Lưu nút vào dictionary với key là Player object

			btn.MouseButton1Click:Connect(function()
				setTarget(p)
			end)

			yPos += 25 + listButtonYOffset -- Cập nhật vị trí Y cho nút tiếp theo
            canvasHeight = yPos -- Cập nhật chiều cao cần thiết cho canvas
		end
	end
	-- Đặt CanvasSize, ít nhất bằng kích thước của ScrollingFrame để thanh cuộn hoạt động đúng
	playerList.CanvasSize = UDim2.new(0, 0, 0, math.max(canvasHeight, playerList.AbsoluteSize.Y))
    highlightSelectedButton(currentTarget) -- Cập nhật highlight sau khi tải lại list
    print("Cập nhật danh sách hoàn tất.") -- Debug
end

-- === Xử lý sự kiện cho bản thân ===

-- Hàm xử lý khi bản thân chết
local function handleSelfDied()
    print("Nhân vật của bạn đã chết!") -- Debug
    -- Tắt các chức năng đang chạy
    looking = false
    toggleButton.Text = "❎ Tắt Nhìn"
    toggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)

    -- Có thể thêm tắt các chức năng khác nếu có (ví dụ: Follow)

    -- Ngắt kết nối Died cũ (sẽ kết nối lại khi nhân vật mới xuất hiện)
    if selfHumanoidDiedConnection then
        selfHumanoidDiedConnection:Disconnect()
        selfHumanoidDiedConnection = nil
    end
end

-- Hàm cập nhật khi nhân vật của bản thân thay đổi (respawn)
local function onCharacterAdded(newCharacter)
    print("Nhân vật mới đã được thêm.") -- Debug
    Character = newCharacter
    Humanoid = newCharacter:WaitForChild("Humanoid")
    HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")

    -- Ngắt kết nối Died cũ nếu còn
	if selfHumanoidDiedConnection then
		selfHumanoidDiedConnection:Disconnect()
		selfHumanoidDiedConnection = nil
	end

    -- Kết nối lại sự kiện Died cho humanoid mới
	if Humanoid then
	    selfHumanoidDiedConnection = Humanoid.Died:Connect(handleSelfDied)
        print("Đã kết nối Died cho nhân vật mới.") -- Debug
    else
        warn("Không tìm thấy Humanoid cho nhân vật mới!")
    end
end

-- Kết nối sự kiện CharacterAdded
Player.CharacterAdded:Connect(onCharacterAdded)

-- Kết nối sự kiện Died cho nhân vật ban đầu (nếu chưa chết)
if Humanoid then
    selfHumanoidDiedConnection = Humanoid.Died:Connect(handleSelfDied)
    print("Đã kết nối Died cho nhân vật ban đầu.") -- Debug
end


-- === Logic nút ===

-- Nearest Player Button Logic
nearestButton.MouseButton1Click:Connect(function()
    if not isSelfCharacterValid() then
        print("Nhân vật của bạn không hợp lệ để tìm người chơi gần nhất.") -- Debug
        return
    end

	local closestPlayer = nil
	local shortestDistance = math.huge
	local myRootPos = HumanoidRootPart.Position -- Lấy vị trí từ biến đã cập nhật

	for _, p in ipairs(Players:GetPlayers()) do
		if p ~= Player then -- Bỏ qua chính mình
            local targetChar = p.Character
            if targetChar then
                local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    local distance = (targetRoot.Position - myRootPos).Magnitude
                    if distance < shortestDistance then
                        closestPlayer = p
                        shortestDistance = distance
                    end
                end
            end
		end
	end

	if closestPlayer then
        print("Người chơi gần nhất:", closestPlayer.Name) -- Debug
		setTarget(closestPlayer)
	else
        print("Không tìm thấy người chơi nào khác gần đó.") -- Debug
    end
end)

-- Teleport Button Logic
teleportButton.MouseButton1Click:Connect(function()
	-- 1. Kiểm tra nhân vật bản thân
    if not isSelfCharacterValid() then
        print("Không thể dịch chuyển: Nhân vật của bạn không hợp lệ.") -- Debug
        return
    end

    -- 2. Kiểm tra mục tiêu đã chọn
	if not currentTarget then
		print("Không thể dịch chuyển: Chưa chọn mục tiêu.") -- Debug
		return
	end

    -- 3. Kiểm tra nhân vật mục tiêu
    if not isTargetCharacterValid(currentTarget) then
        print("Không thể dịch chuyển: Mục tiêu không hợp lệ hoặc đã chết/rời đi.") -- Debug
        -- Tùy chọn: Có thể tự động bỏ chọn mục tiêu ở đây nếu muốn
        -- currentTarget = nil
        -- highlightSelectedButton(nil)
        -- if targetHumanoidConnection then targetHumanoidConnection:Disconnect(); targetHumanoidConnection = nil end
        return
    end

    -- Lấy các bộ phận cần thiết (đã được kiểm tra tồn tại bởi isTargetCharacterValid)
    local targetRoot = currentTarget.Character.HumanoidRootPart

    -- Tính toán vị trí phía sau mục tiêu
    local targetLookVector = targetRoot.CFrame.LookVector -- Hướng nhìn của mục tiêu
    local distanceBehind = 1.5 -- Khoảng cách sau lưng (MẶC ĐỊNH 1.5 block, có thể chỉnh)
    local verticalOffset = 0.5 -- Nâng Y lên một chút để tránh kẹt
    local teleportPosition = targetRoot.Position - (targetLookVector * distanceBehind) + Vector3.new(0, verticalOffset, 0)

    -- Tạo CFrame mới: vị trí là điểm đã tính, hướng nhìn về mục tiêu
    local newCFrame = CFrame.new(teleportPosition, targetRoot.Position)

    -- Dịch chuyển nhân vật của BẠN bằng SetPrimaryPartCFrame
    Character:SetPrimaryPartCFrame(newCFrame)
    print("Đã dịch chuyển ra sau lưng", currentTarget.Name) -- Debug

end)

-- Button Events
reloadButton.MouseButton1Click:Connect(updateList)

partButton.MouseButton1Click:Connect(function()
	partIndex = (partIndex % #bodyParts) + 1
	partButton.Text = "Nhìn: " .. bodyParts[partIndex]
end)

toggleButton.MouseButton1Click:Connect(function()
    -- Chỉ bật nhìn nếu nhân vật bản thân hợp lệ
    if not looking and not isSelfCharacterValid() then
         print("Không thể bật nhìn: Nhân vật của bạn không hợp lệ.")
         return
    end

	looking = not looking
	toggleButton.Text = looking and "✅ Bật Nhìn" or "❎ Tắt Nhìn"
	toggleButton.BackgroundColor3 = looking and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
    print("Trạng thái nhìn đã chuyển thành:", looking) -- Debug
end)

-- Minimize/Maximize
MinimizeButton.MouseButton1Click:Connect(function()
	Frame.Visible = false
	MinimizedIcon.Visible = true
end)
MinimizedIcon.MouseButton1Click:Connect(function()
	Frame.Visible = true
	MinimizedIcon.Visible = false
end)

-- Close
CloseButton.MouseButton1Click:Connect(function()
    print("Đang đóng GUI...") -- Debug
	-- Ngắt kết nối tất cả các sự kiện và render step trước khi hủy
	if targetHumanoidConnection then
		targetHumanoidConnection:Disconnect()
        targetHumanoidConnection = nil
        print("Đã ngắt kết nối Died của mục tiêu khi đóng.") -- Debug
	end
	if selfHumanoidDiedConnection then
		selfHumanoidDiedConnection:Disconnect()
        selfHumanoidDiedConnection = nil
        print("Đã ngắt kết nối Died của bản thân khi đóng.") -- Debug
	end
    if lookAtRenderStepConnection then
        RunService:UnbindFromRenderStep("LookAtTarget")
        lookAtRenderStepConnection = nil
         print("Đã Unbind RenderStep LookAtTarget.") -- Debug
    end
	ScreenGui:Destroy() -- Hủy toàn bộ GUI
    print("GUI đã được hủy.") -- Debug
end)

-- === Look logic (RenderStep) ===
local function lookAtTargetRenderStep()
    -- 1. Kiểm tra trạng thái nhìn và mục tiêu
    if not looking or not currentTarget then return end

    -- 2. Kiểm tra nhân vật bản thân còn hợp lệ không
    if not isSelfCharacterValid() then
        -- Nếu nhân vật bản thân không hợp lệ, tự động tắt nhìn
        looking = false
        toggleButton.Text = "❎ Tắt Nhìn"
        toggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
        print("Tự động tắt nhìn do nhân vật bản thân không hợp lệ.") -- Debug
        return
    end

    -- 3. Kiểm tra mục tiêu còn hợp lệ không
    if not isTargetCharacterValid(currentTarget) then
        -- Nếu mục tiêu không hợp lệ (chết, rời game), tự động tắt nhìn và bỏ chọn
        print("Mục tiêu không hợp lệ trong RenderStep, đang tắt nhìn và bỏ chọn...") -- Debug
        handleTargetDied(currentTarget) -- Gọi hàm xử lý chết (sẽ tắt nhìn, bỏ chọn, ngắt kết nối)
        return
    end

    -- 4. Thực hiện nhìn
    local targetChar = currentTarget.Character -- Đã kiểm tra tồn tại bởi isTargetCharacterValid
    local targetPart = targetChar:FindFirstChild(bodyParts[partIndex])

    if not targetPart then
        -- Nếu không tìm thấy bộ phận cụ thể, thử nhìn vào HumanoidRootPart
        targetPart = targetChar:FindFirstChild("HumanoidRootPart")
    end

    if targetPart then
        local lookFrom = Camera.CFrame.Position
        local lookAt = targetPart.Position
        -- Kiểm tra khoảng cách tránh lỗi CFrame khi vị trí camera trùng với mục tiêu
        if (lookFrom - lookAt).Magnitude > 0.1 then
            Camera.CFrame = CFrame.new(lookFrom, lookAt)
        end
    else
         -- Nếu không tìm thấy cả bộ phận mong muốn và HRP (rất hiếm), thì không làm gì cả trong frame này
         -- Logic isTargetCharacterValid ở trên đã đảm bảo HRP tồn tại, nên trường hợp này khó xảy ra
         warn("Không tìm thấy bộ phận hợp lệ để nhìn vào cho mục tiêu:", currentTarget.Name)
    end
end

-- Bind look logic to RenderStep
-- Chỉ bind nếu chưa có connection nào
if not lookAtRenderStepConnection then
    lookAtRenderStepConnection = RunService:BindToRenderStep("LookAtTarget", Enum.RenderPriority.Camera.Value + 1, lookAtTargetRenderStep)
    print("Đã Bind RenderStep LookAtTarget.") -- Debug
end

-- Bỏ bind khi GUI bị hủy để tránh lỗi (đã xử lý trong sự kiện CloseButton)
ScreenGui.Destroying:Connect(function()
    print("Sự kiện ScreenGui.Destroying được kích hoạt.") -- Debug
	if targetHumanoidConnection then
		targetHumanoidConnection:Disconnect()
        targetHumanoidConnection = nil
        print("Đã ngắt kết nối Died của mục tiêu trong Destroying.") -- Debug
	end
    if selfHumanoidDiedConnection then
		selfHumanoidDiedConnection:Disconnect()
        selfHumanoidDiedConnection = nil
        print("Đã ngắt kết nối Died của bản thân trong Destroying.") -- Debug
	end
    -- Đảm bảo unbind ngay cả khi không bấm nút Close
    if lookAtRenderStepConnection then
        pcall(function() RunService:UnbindFromRenderStep("LookAtTarget") end)
        lookAtRenderStepConnection = nil
        print("Đã Unbind RenderStep LookAtTarget trong Destroying.") -- Debug
    end
    print("LookAt GUI Destroyed and Connections Cleaned.") -- Debug
end)


-- === Init ===
updateList() -- Tải danh sách người chơi lần đầu
print("LookAt GUI Loaded and Initialized.") -- Debug

-- Tự động bật nhìn lúc đầu (nếu muốn)
-- looking = true
-- toggleButton.Text = "✅ Bật Nhìn"
-- toggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)

-- Tự động tắt nhìn lúc đầu (an toàn hơn)
looking = false
toggleButton.Text = "❎ Tắt Nhìn"
toggleButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)

