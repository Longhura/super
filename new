-- Lấy các Service cần thiết
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")

-- Lấy thông tin Player và Character
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")
local rootPart = char:WaitForChild("HumanoidRootPart")

-- Tạo GUI chính
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "EnhancedEntityControl"
ScreenGui.Parent = PlayerGui
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Tạo Frame chính (khung) với thiết kế hiện đại hơn
local Frame = Instance.new("Frame")
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30) -- Màu nền tối hơn
Frame.Position = UDim2.new(0.5, -150, 0.5, -175)
Frame.Size = UDim2.new(0, 300, 0, 350) -- Giảm chiều rộng để gọn hơn
Frame.Active = true
Frame.Draggable = true
Frame.BorderSizePixel = 0
Frame.ClipsDescendants = true -- Tránh các phần tử con tràn ra ngoài

-- Tạo viền cầu vồng nâng cao
local UIStroke = Instance.new("UIStroke")
UIStroke.Parent = Frame
UIStroke.Thickness = 2 -- Mỏng hơn để tinh tế
UIStroke.Color = Color3.fromRGB(255, 0, 0)
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

-- Tạo hiệu ứng bo góc
local UICorner = Instance.new("UICorner")
UICorner.Parent = Frame
UICorner.CornerRadius = UDim.new(0, 8)

-- Tạo thanh tiêu đề
local TitleBar = Instance.new("Frame")
TitleBar.Parent = Frame
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.Position = UDim2.new(0, 0, 0, 0)
TitleBar.BorderSizePixel = 0

-- Bo góc cho thanh tiêu đề
local TitleCorner = Instance.new("UICorner")
TitleCorner.Parent = TitleBar
TitleCorner.CornerRadius = UDim.new(0, 8)

-- Clip mask để tránh thanh tiêu đề tràn ra ngoài
local TitleClip = Instance.new("Frame")
TitleClip.Parent = TitleBar
TitleClip.BackgroundColor3 = TitleBar.BackgroundColor3
TitleClip.Size = UDim2.new(1, 0, 0.5, 0)
TitleClip.Position = UDim2.new(0, 0, 0.5, 0)
TitleClip.BorderSizePixel = 0

-- Tiêu đề
local Title = Instance.new("TextLabel")
Title.Parent = TitleBar
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.Font = Enum.Font.GothamBold
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.Text = "Entity Control v2.0"
Title.TextXAlignment = Enum.TextXAlignment.Left

-- Tạo nút đóng (X) hiện đại hơn
local CloseButton = Instance.new("TextButton")
CloseButton.Parent = TitleBar
CloseButton.Size = UDim2.new(0, 24, 0, 24)
CloseButton.Position = UDim2.new(1, -27, 0, 3)
CloseButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
CloseButton.Text = "✕"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 14
CloseButton.BorderSizePixel = 0
CloseButton.AutoButtonColor = true
CloseButton.ZIndex = 2

-- Bo góc cho nút đóng
local CloseCorner = Instance.new("UICorner")
CloseCorner.Parent = CloseButton
CloseCorner.CornerRadius = UDim.new(0, 4)

CloseButton.MouseEnter:Connect(function() CloseButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70) end)
CloseButton.MouseLeave:Connect(function() CloseButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50) end)

local function closeGui() ScreenGui:Destroy() end
CloseButton.MouseButton1Click:Connect(closeGui)

-- Tạo container cho nội dung (để có thể scroll)
local ContentFrame = Instance.new("ScrollingFrame")
ContentFrame.Parent = Frame
ContentFrame.BackgroundTransparency = 1
ContentFrame.Position = UDim2.new(0, 0, 0, 30) -- Bắt đầu sau thanh tiêu đề
ContentFrame.Size = UDim2.new(1, 0, 1, -30)
ContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Sẽ tự động điều chỉnh
ContentFrame.ScrollBarThickness = 4
ContentFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
ContentFrame.BorderSizePixel = 0
ContentFrame.ClipsDescendants = true
ContentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

-- Tạo layout cho nội dung
local ContentLayout = Instance.new("UIListLayout")
ContentLayout.Parent = ContentFrame
ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
ContentLayout.Padding = UDim.new(0, 10)
ContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- Thêm padding cho nội dung
local ContentPadding = Instance.new("UIPadding")
ContentPadding.Parent = ContentFrame
ContentPadding.PaddingTop = UDim.new(0, 10)
ContentPadding.PaddingBottom = UDim.new(0, 10)
ContentPadding.PaddingLeft = UDim.new(0, 10)
ContentPadding.PaddingRight = UDim.new(0, 10)

-- --- Chức năng chính ---

-- Hàm tạo section
local function createSection(title)
    local section = Instance.new("Frame")
    section.Name = title.."Section"
    section.Parent = ContentFrame
    section.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    section.BorderSizePixel = 0
    section.Size = UDim2.new(1, -10, 0, 30) -- Kích thước ban đầu
    section.AutomaticSize = Enum.AutomaticSize.Y
    
    -- Bo góc cho section
    local sectionCorner = Instance.new("UICorner")
    sectionCorner.Parent = section
    sectionCorner.CornerRadius = UDim.new(0, 6)
    
    -- Tiêu đề section
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Parent = section
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Size = UDim2.new(1, 0, 0, 30)
    sectionTitle.Font = Enum.Font.GothamSemibold
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 14
    sectionTitle.Text = title
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Center
    
    -- Container cho nội dung section
    local sectionContent = Instance.new("Frame")
    sectionContent.Name = "Content"
    sectionContent.Parent = section
    sectionContent.BackgroundTransparency = 1
    sectionContent.Position = UDim2.new(0, 0, 0, 30)
    sectionContent.Size = UDim2.new(1, 0, 0, 0)
    sectionContent.AutomaticSize = Enum.AutomaticSize.Y
    
    -- Layout cho nội dung section
    local sectionLayout = Instance.new("UIListLayout")
    sectionLayout.Parent = sectionContent
    sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sectionLayout.Padding = UDim.new(0, 8)
    sectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    
    -- Padding cho nội dung section
    local sectionPadding = Instance.new("UIPadding")
    sectionPadding.Parent = sectionContent
    sectionPadding.PaddingTop = UDim.new(0, 5)
    sectionPadding.PaddingBottom = UDim.new(0, 10)
    sectionPadding.PaddingLeft = UDim.new(0, 10)
    sectionPadding.PaddingRight = UDim.new(0, 10)
    
    return sectionContent
end

-- Hàm tạo label
local function createLabel(parent, text)
    local label = Instance.new("TextLabel")
    label.Parent = parent
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Font = Enum.Font.Gotham
    label.TextColor3 = Color3.fromRGB(220, 220, 220)
    label.TextSize = 12
    label.Text = text
    label.TextXAlignment = Enum.TextXAlignment.Left
    return label
end

-- Hàm tạo textbox
local function createTextbox(parent, placeholder, defaultValue)
    local textbox = Instance.new("TextBox")
    textbox.Parent = parent
    textbox.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
    textbox.Size = UDim2.new(1, 0, 0, 30)
    textbox.Font = Enum.Font.Gotham
    textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textbox.TextSize = 14
    textbox.Text = defaultValue or ""
    textbox.PlaceholderText = placeholder
    textbox.TextXAlignment = Enum.TextXAlignment.Left
    textbox.ClearTextOnFocus = false
    textbox.BorderSizePixel = 0
    
    -- Bo góc cho textbox
    local textboxCorner = Instance.new("UICorner")
    textboxCorner.Parent = textbox
    textboxCorner.CornerRadius = UDim.new(0, 4)
    
    -- Padding cho text
    local textboxPadding = Instance.new("UIPadding")
    textboxPadding.Parent = textbox
    textboxPadding.PaddingLeft = UDim.new(0, 8)
    
    return textbox
end

-- Hàm tạo nút
local function createButton(parent, text, color)
    local button = Instance.new("TextButton")
    button.Parent = parent
    button.BackgroundColor3 = color or Color3.fromRGB(60, 60, 65)
    button.Size = UDim2.new(1, 0, 0, 36)
    button.Font = Enum.Font.GothamSemibold
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Text = text
    button.BorderSizePixel = 0
    button.AutoButtonColor = true
    
    -- Bo góc cho button
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.Parent = button
    buttonCorner.CornerRadius = UDim.new(0, 4)
    
    -- Hiệu ứng hover
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(
            math.min(button.BackgroundColor3.R * 255 + 20, 255) / 255,
            math.min(button.BackgroundColor3.G * 255 + 20, 255) / 255,
            math.min(button.BackgroundColor3.B * 255 + 20, 255) / 255
        )
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = color or Color3.fromRGB(60, 60, 65)
    end)
    
    return button
end

-- Hàm tìm nhiều Entity/NPC gần nhất (Nâng cấp: tìm N entity còn sống)
local function getClosestLivingEntities(count, radius, filterFunc)
    local entitiesInRange = {}
    local playerPos = rootPart and rootPart.Position
    radius = radius or 1000
    count = count or 1
    filterFunc = filterFunc or function() return true end -- Mặc định không lọc

    if not playerPos then return {} end -- Trả về bảng rỗng nếu không có vị trí người chơi

    -- Tìm tất cả các entity trong workspace
    for _, descendant in pairs(workspace:GetDescendants()) do
        if descendant:IsA("Model") and descendant ~= char then
            local targetHumanoid = descendant:FindFirstChildOfClass("Humanoid")
            local entityRoot = descendant:FindFirstChild("HumanoidRootPart") or 
                               descendant:FindFirstChild("Torso") or 
                               descendant:FindFirstChild("UpperTorso") or
                               descendant:FindFirstChild("PrimaryPart") or
                               descendant:FindFirstChildWhichIsA("BasePart")

            -- Chỉ xét entity có part và đạt điều kiện lọc
            if entityRoot and filterFunc(descendant) then
                local dist = (entityRoot.Position - playerPos).Magnitude
                if dist < radius then
                    table.insert(entitiesInRange, {
                        distance = dist, 
                        entity = descendant, 
                        rootPart = entityRoot,
                        humanoid = targetHumanoid
                    })
                end
            end
        end
    end

    -- Sắp xếp các entity theo khoảng cách tăng dần
    table.sort(entitiesInRange, function(a, b)
        return a.distance < b.distance
    end)

    -- Lấy số lượng entity cần thiết (tối đa là số lượng tìm được)
    local finalEntities = {}
    for i = 1, math.min(count, #entitiesInRange) do
        table.insert(finalEntities, entitiesInRange[i])
    end

    return finalEntities
end

-- Hàm tìm Entity/NPC gần nhất (Giữ lại cho các chức năng cũ)
local function getClosestSingleLivingEntity(radius, filterFunc)
    local closestEntities = getClosestLivingEntities(1, radius, filterFunc)
    return closestEntities[1] and closestEntities[1].entity -- Trả về entity đầu tiên (gần nhất) hoặc nil
end

-- Hàm kiểm tra entity có phải là XP entity không (dựa vào tên hoặc thuộc tính)
local function isXPEntity(entity)
    -- Kiểm tra tên (điều chỉnh theo game cụ thể)
    local name = entity.Name:lower()
    if name:find("exp") or name:find("xp") or name:find("experience") then
        return true
    end
    
    -- Kiểm tra các thuộc tính đặc trưng (điều chỉnh theo game)
    if entity:FindFirstChild("XP") or entity:FindFirstChild("Experience") then
        return true
    end
    
    -- Có thể thêm các điều kiện khác tùy theo game
    
    return false -- Mặc định không phải XP entity
end

-- === Chức năng Follow Entity (Nâng cấp) ===

local isFollowingEntity = false
local followEntityConnection = nil
local followEntityButton = nil

local FOLLOW_DISTANCE_BEHIND = 5  -- Khoảng cách theo sau entity (5 studs)
local FOLLOW_DISTANCE_ABOVE = 2   -- Độ cao so với entity (2 studs phía trên)

local function followEntityLoop()
    if not isFollowingEntity then return end

    local targetEntity = getClosestSingleLivingEntity() -- Tìm entity còn sống gần nhất
    local playerRoot = char and char:FindFirstChild("HumanoidRootPart")
    local playerHumanoid = char and char:FindFirstChild("Humanoid")

    if not targetEntity then
        print("Không tìm thấy entity nào để follow.")
        return
    end

    local targetRoot = targetEntity:FindFirstChild("HumanoidRootPart") or 
                       targetEntity:FindFirstChild("Torso") or 
                       targetEntity:FindFirstChild("UpperTorso") or
                       targetEntity:FindFirstChild("PrimaryPart") or
                       targetEntity:FindFirstChildWhichIsA("BasePart")

    -- Kiểm tra điều kiện dừng
    if not playerRoot or not playerHumanoid or playerHumanoid.Health <= 0 or not targetRoot then
        if isFollowingEntity then
            print("Follow Entity bị dừng tự động (Player/Target không hợp lệ hoặc target biến mất).")
            isFollowingEntity = false
            if followEntityConnection then followEntityConnection:Disconnect(); followEntityConnection = nil; end
            if followEntityButton then
                followEntityButton.Text = "Follow Behind"
                followEntityButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
            end
        end
        return
    end

    -- Tính toán vị trí và hướng nhìn
    local targetCFrame = targetRoot.CFrame
    local targetPos = targetCFrame.Position
    local targetLookVector = targetCFrame.LookVector
    local offsetPosition = targetPos + Vector3.new(0, FOLLOW_DISTANCE_ABOVE, 0) - (targetLookVector * FOLLOW_DISTANCE_BEHIND)
    playerRoot.CFrame = CFrame.new(offsetPosition, targetPos)
end

local function toggleFollowEntity()
    if not isFollowingEntity then
        local entityToFollow = getClosestSingleLivingEntity()
        if not entityToFollow then
            print("Không tìm thấy entity nào còn sống gần đó để follow.")
            return
        end

        print("Bật Follow Behind: " .. entityToFollow.Name)
        isFollowingEntity = true
        if followEntityButton then
            followEntityButton.Text = "Stop Following"
            followEntityButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        end
        if followEntityConnection then followEntityConnection:Disconnect() end
        followEntityConnection = RunService.Heartbeat:Connect(followEntityLoop)
    else
        print("Tắt Follow Behind.")
        isFollowingEntity = false
        if followEntityConnection then followEntityConnection:Disconnect(); followEntityConnection = nil; end
        if followEntityButton then
            followEntityButton.Text = "Follow Behind"
            followEntityButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
        end
    end
end

-- === Chức năng Bring Entity To Player (Nâng cấp) ===

local BRING_DISTANCE_FRONT = 5 -- Khoảng cách trước mặt người chơi

local function bringEntityToPlayer()
    local targetEntity = getClosestSingleLivingEntity()
    local playerRoot = char and char:FindFirstChild("HumanoidRootPart")

    if not targetEntity then print("Không tìm thấy entity nào còn sống gần đó để đưa đến."); return end
    if not playerRoot then print("Không tìm thấy HumanoidRootPart của người chơi."); return end

    local targetRoot = targetEntity:FindFirstChild("HumanoidRootPart") or 
                       targetEntity:FindFirstChild("Torso") or 
                       targetEntity:FindFirstChild("UpperTorso") or
                       targetEntity:FindFirstChild("PrimaryPart") or
                       targetEntity:FindFirstChildWhichIsA("BasePart")
                       
    if not targetRoot then print("Entity mục tiêu không có part chính."); return end

    local playerCFrame = playerRoot.CFrame
    local targetPosition = playerCFrame.Position + playerCFrame.LookVector * BRING_DISTANCE_FRONT
    local lookAtPlayerPosition = playerCFrame.Position

    -- Sử dụng SetPrimaryPartCFrame nếu là Model, hoặc CFrame trực tiếp nếu chỉ có root part
    if targetEntity:IsA("Model") and targetEntity.PrimaryPart then
         targetEntity:SetPrimaryPartCFrame(CFrame.new(targetPosition, lookAtPlayerPosition))
    elseif targetRoot then
         targetRoot.CFrame = CFrame.new(targetPosition, lookAtPlayerPosition)
    else
         warn("Không thể di chuyển entity:", targetEntity.Name, "- Không có PrimaryPart hoặc Root Part.")
         return
    end

    print("Đã đưa " .. targetEntity.Name .. " đến trước mặt bạn.")
end

-- === Chức năng Hiển thị Hitbox Entity (Nâng cấp) ===

local isHitboxVisible = false
local hitboxConnection = nil      -- Kết nối Heartbeat
local hitboxButton = nil          -- Tham chiếu nút
local currentHitboxEntities = {}  -- Bảng lưu các entity đang hiển thị hitbox { entity = visual }
local hitboxCount = 3             -- Số lượng entity hiển thị hitbox (mặc định 3)
local hitboxThickness = 0.05      -- Kích thước viền hitbox (mặc định 0.05)

-- Hàm cập nhật hiển thị hitbox
local function updateHitboxVisualization()
    if not isHitboxVisible then return end -- Dừng nếu chức năng bị tắt

    local playerRoot = char and char:FindFirstChild("HumanoidRootPart")
    if not playerRoot then return end -- Cần vị trí người chơi

    -- Tìm N entity gần nhất còn sống
    local nearestEntities = getClosestLivingEntities(hitboxCount)
    local newEntitiesSet = {} -- Dùng set để kiểm tra nhanh sự tồn tại

    -- Tạo hitbox cho entity mới và cập nhật set
    for _, entityData in ipairs(nearestEntities) do
        local entity = entityData.entity
        local entityRoot = entityData.rootPart
        local distance = entityData.distance
        
        newEntitiesSet[entity] = true -- Đánh dấu entity này nên có hitbox

        -- Nếu entity này chưa có hitbox -> Tạo mới
        if not currentHitboxEntities[entity] then
            local visual = Instance.new("SelectionBox")
            visual.Name = "EntityHitboxVisual_" .. entity.Name
            visual.Adornee = entityRoot
            visual.Color3 = Color3.fromRGB(255, 255, 0) -- Vàng
            visual.LineThickness = hitboxThickness
            visual.Parent = ScreenGui
            
            -- Tạo label hiển thị khoảng cách
            local distanceLabel = Instance.new("BillboardGui")
            distanceLabel.Name = "DistanceLabel"
            distanceLabel.Parent = visual
            distanceLabel.Adornee = entityRoot
            distanceLabel.Size = UDim2.new(0, 100, 0, 40)
            distanceLabel.StudsOffset = Vector3.new(0, 2, 0)
            distanceLabel.AlwaysOnTop = true
            
            local distanceText = Instance.new("TextLabel")
            distanceText.Parent = distanceLabel
            distanceText.BackgroundTransparency = 1
            distanceText.Size = UDim2.new(1, 0, 1, 0)
            distanceText.Font = Enum.Font.GothamBold
            distanceText.TextColor3 = Color3.fromRGB(255, 255, 255)
            distanceText.TextStrokeTransparency = 0.5
            distanceText.TextSize = 14
            distanceText.Text = string.format("%.1f m", distance)
            
            currentHitboxEntities[entity] = {
                box = visual,
                label = distanceLabel,
                text = distanceText
            }
        else
            -- Nếu đã có, cập nhật Adornee, Thickness và khoảng cách
            local visual = currentHitboxEntities[entity]
            if visual.box.Adornee ~= entityRoot then visual.box.Adornee = entityRoot end
            if visual.box.LineThickness ~= hitboxThickness then visual.box.LineThickness = hitboxThickness end
            if visual.label.Adornee ~= entityRoot then visual.label.Adornee = entityRoot end
            visual.text.Text = string.format("%.1f m", distance)
        end
    end

    -- Xóa hitbox của entity không còn nằm trong danh sách gần nhất hoặc đã chết/biến mất
    for entity, visual in pairs(currentHitboxEntities) do
        if not newEntitiesSet[entity] or not entity.Parent then
            if visual.box then visual.box:Destroy() end
            if visual.label then visual.label:Destroy() end
            currentHitboxEntities[entity] = nil -- Xóa khỏi bảng theo dõi
        end
    end
end

-- Hàm bật/tắt toàn bộ chức năng hitbox
local function toggleHitboxVisualization()
    if not isHitboxVisible then -- === Đang TẮT -> BẬT ===
        print("Bật hiển thị Hitbox.")
        isHitboxVisible = true

        -- Dọn dẹp hitbox cũ (nếu có từ lần chạy trước bị lỗi)
        for entity, visual in pairs(currentHitboxEntities) do
            if visual.box then visual.box:Destroy() end
            if visual.label then visual.label:Destroy() end
        end
        currentHitboxEntities = {} -- Reset bảng

        -- Cập nhật trạng thái nút
        if hitboxButton then
            hitboxButton.Text = "Hitbox ON"
            hitboxButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Xanh lá (ON)
        end

        -- Bắt đầu vòng lặp cập nhật Heartbeat
        if hitboxConnection then hitboxConnection:Disconnect() end
        hitboxConnection = RunService.Heartbeat:Connect(updateHitboxVisualization)

        -- Chạy cập nhật ngay lần đầu
        task.defer(updateHitboxVisualization)

    else -- === Đang BẬT -> TẮT ===
        print("Tắt hiển thị Hitbox.")
        isHitboxVisible = false

        -- Dừng vòng lặp cập nhật
        if hitboxConnection then
            hitboxConnection:Disconnect()
            hitboxConnection = nil
        end

        -- Xóa tất cả các hitbox đang hiển thị
        for entity, visual in pairs(currentHitboxEntities) do
            if visual.box then visual.box:Destroy() end
            if visual.label then visual.label:Destroy() end
        end
        currentHitboxEntities = {} -- Reset bảng

        -- Cập nhật trạng thái nút
        if hitboxButton then
            hitboxButton.Text = "Show Hitboxes"
            hitboxButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65) -- Màu OFF
        end
    end
end

-- === Chức năng mới: Hiển thị XP Entity gần nhất ===

local isXPTrackerEnabled = false
local xpTrackerConnection = nil
local xpTrackerButton = nil
local currentXPVisual = nil

local function updateXPEntityTracker()
    if not isXPTrackerEnabled then return end
    
    local playerRoot = char and char:FindFirstChild("HumanoidRootPart")
    if not playerRoot then return end
    
    -- Xóa visual cũ nếu có
    if currentXPVisual then
        for _, item in pairs(currentXPVisual) do
            if item and item.Parent then item:Destroy() end
        end
        currentXPVisual = nil
    end
    
    -- Tìm XP entity gần nhất
    local xpEntity = getClosestSingleLivingEntity(1000, isXPEntity)
    
    if not xpEntity then return end -- Không tìm thấy XP entity nào
    
    local xpRoot = xpEntity:FindFirstChild("HumanoidRootPart") or 
                   xpEntity:FindFirstChild("Torso") or 
                   xpEntity:FindFirstChild("UpperTorso") or
                   xpEntity:FindFirstChild("PrimaryPart") or
                   xpEntity:FindFirstChildWhichIsA("BasePart")
                   
    if not xpRoot then return end
    
    -- Tính khoảng cách
    local distance = (xpRoot.Position - playerRoot.Position).Magnitude
    
    -- Tạo visual mới
    local xpBox = Instance.new("SelectionBox")
    xpBox.Name = "XPEntityTracker"
    xpBox.Adornee = xpRoot
    xpBox.Color3 = Color3.fromRGB(255, 0, 0) -- Đỏ
    xpBox.LineThickness = 0.08 -- Dày hơn hitbox thường
    xpBox.Parent = ScreenGui
    
    -- Tạo label hiển thị khoảng cách
    local xpLabel = Instance.new("BillboardGui")
    xpLabel.Name = "XPDistanceLabel"
    xpLabel.Parent = ScreenGui
    xpLabel.Adornee = xpRoot
    xpLabel.Size = UDim2.new(0, 150, 0, 50)
    xpLabel.StudsOffset = Vector3.new(0, 3, 0)
    xpLabel.AlwaysOnTop = true
    
    local xpText = Instance.new("TextLabel")
    xpText.Parent = xpLabel
    xpText.BackgroundTransparency = 1
    xpText.Size = UDim2.new(1, 0, 1, 0)
    xpText.Font = Enum.Font.GothamBold
    xpText.TextColor3 = Color3.fromRGB(255, 50, 50) -- Đỏ tươi
    xpText.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    xpText.TextStrokeTransparency = 0
    xpText.TextSize = 16
    xpText.Text = "XP: " .. xpEntity.Name .. " (" .. string.format("%.1f m", distance) .. ")"
    
    -- Tạo ESP xuyên tường
    local xpESP = Instance.new("BoxHandleAdornment")
    xpESP.Name = "XPESP"
    xpESP.Parent = ScreenGui
    xpESP.Adornee = xpRoot
    xpESP.AlwaysOnTop = true
    xpESP.ZIndex = 10
    xpESP.Size = xpRoot.Size
    xpESP.Transparency = 0.7
    xpESP.Color3 = Color3.fromRGB(255, 0, 0)
    
    -- Lưu lại để xóa sau
    currentXPVisual = {
        box = xpBox,
        label = xpLabel,
        esp = xpESP
    }
end

local function toggleXPEntityTracker()
    if not isXPTrackerEnabled then
        print("Bật theo dõi XP Entity.")
        isXPTrackerEnabled = true
        
        -- Cập nhật trạng thái nút
        if xpTrackerButton then
            xpTrackerButton.Text = "XP Tracker ON"
            xpTrackerButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0) -- Đỏ (ON)
        end
        
        -- Bắt đầu vòng lặp cập nhật
        if xpTrackerConnection then xpTrackerConnection:Disconnect() end
        xpTrackerConnection = RunService.Heartbeat:Connect(updateXPEntityTracker)
        
        -- Chạy cập nhật ngay lần đầu
        task.defer(updateXPEntityTracker)
    else
        print("Tắt theo dõi XP Entity.")
        isXPTrackerEnabled = false
        
        -- Dừng vòng lặp cập nhật
        if xpTrackerConnection then
            xpTrackerConnection:Disconnect()
            xpTrackerConnection = nil
        end
        
        -- Xóa visual
        if currentXPVisual then
            for _, item in pairs(currentXPVisual) do
                if item and item.Parent then item:Destroy() end
            end
            currentXPVisual = nil
        end
        
        -- Cập nhật trạng thái nút
        if xpTrackerButton then
            xpTrackerButton.Text = "Track XP Entity"
            xpTrackerButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65) -- Màu OFF
        end
    end
end

-- === Tạo giao diện người dùng ===

-- Section Hitbox Settings
local hitboxSection = createSection("Hitbox Settings")

-- Label và Textbox cho số lượng hitbox
createLabel(hitboxSection, "Số lượng Hitbox hiển thị:")
local countTextbox = createTextbox(hitboxSection, "Nhập số > 0", tostring(hitboxCount))

-- Label và Textbox cho độ dày viền
createLabel(hitboxSection, "Độ dày viền Hitbox:")
local thicknessTextbox = createTextbox(hitboxSection, "Nhập số > 0 (vd: 0.05)", tostring(hitboxThickness))

-- Xử lý input cho Textbox
countTextbox.FocusLost:Connect(function(enterPressed)
    local num = tonumber(countTextbox.Text)
    if num and num >= 1 then
        hitboxCount = math.floor(num) -- Chỉ lấy phần nguyên
        print("Số lượng hitbox được đặt thành:", hitboxCount)
        countTextbox.Text = tostring(hitboxCount) -- Cập nhật lại text nếu là số hợp lệ
        -- Nếu hitbox đang bật, cập nhật ngay lập tức
        if isHitboxVisible then
             updateHitboxVisualization()
        end
    else
        print("Số lượng không hợp lệ, sử dụng giá trị cũ:", hitboxCount)
        countTextbox.Text = tostring(hitboxCount) -- Reset về giá trị cũ nếu không hợp lệ
    end
end)

thicknessTextbox.FocusLost:Connect(function(enterPressed)
    local num = tonumber(thicknessTextbox.Text)
    if num and num > 0 then
        hitboxThickness = num
        print("Độ dày hitbox được đặt thành:", hitboxThickness)
        thicknessTextbox.Text = tostring(hitboxThickness)
        -- Cập nhật độ dày cho các hitbox đang hiển thị nếu có
        if isHitboxVisible then
            for entity, visual in pairs(currentHitboxEntities) do
                if visual.box and visual.box.Parent then
                    visual.box.LineThickness = hitboxThickness
                end
            end
        end
    else
        print("Độ dày không hợp lệ, sử dụng giá trị cũ:", hitboxThickness)
        thicknessTextbox.Text = tostring(hitboxThickness)
    end
end)

-- Section Entity Controls
local controlSection = createSection("Entity Controls")

-- Tạo các nút chức năng
followEntityButton = createButton(controlSection, "Follow Behind")
followEntityButton.MouseButton1Click:Connect(toggleFollowEntity)

local bringButton = createButton(controlSection, "Bring Entity To Me")
bringButton.MouseButton1Click:Connect(bringEntityToPlayer)

hitboxButton = createButton(controlSection, "Show Hitboxes")
hitboxButton.MouseButton1Click:Connect(toggleHitboxVisualization)

xpTrackerButton = createButton(controlSection, "Track XP Entity", Color3.fromRGB(180, 40, 40))
xpTrackerButton.MouseButton1Click:Connect(toggleXPEntityTracker)

-- --- Hiệu ứng viền cầu vồng ---
local colors = {
    Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0),
    Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 255, 255), Color3.fromRGB(0, 0, 255),
    Color3.fromRGB(139, 0, 255)
}

local function cycleRainbow()
    local index = 1
    while ScreenGui.Parent do -- Dùng ScreenGui.Parent để kiểm tra GUI còn tồn tại không
        local nextColor = colors[index]
        local success, result = pcall(function()
            if not UIStroke or not UIStroke.Parent then return end -- Kiểm tra UIStroke tồn tại
            local tween = TweenService:Create(UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Linear), { Color = nextColor })
            tween:Play()
            tween.Completed:Wait()
        end)
        if not success or not ScreenGui.Parent then
            if not success then warn("Rainbow cycle stopped due to error:", result) end
            break
        end
        index = index % #colors + 1
        task.wait(0.1)
    end
end

task.spawn(cycleRainbow)

print("Enhanced Entity Control v2.0 Loaded!")
